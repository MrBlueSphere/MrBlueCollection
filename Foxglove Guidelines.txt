
-------- HTML --------


-------- CCS --------

~ Choose Positioning Methods Wisely:

    Position: relative; 
        Purpose: This property positions an element relative to its normal position in the document flow.
        Usage: Use it when you want to nudge an element slightly from its default position, often to accommodate other nearby elements.
        Considerations: Elements with position: relative; retain their space in the layout, so they can affect the positioning of other nearby elements. This can be useful for subtle adjustments.
    
    Position: absolute;
        Purpose: This property positions an element relative to its nearest positioned ancestor or the initial containing block.
        Usage: Use it when you want to precisely place an element in a specific location within its parent or the viewport. It's commonly used for creating overlays, modals, tooltips, or dropdown menus.
        Considerations: Elements with position: absolute; are removed from the normal document flow, so they don't affect the layout of other elements.
    
    Position: fixed;
        Purpose: This property positions an element relative to the viewport, making it stay in the same position even when the page is scrolled.
        Usage: Use it when you want elements like navigation bars or call-to-action buttons to remain visible as users scroll down the page.
        Considerations: Elements with position: fixed; are taken out of the document flow and can overlap other content.
    
    display: flex; and display: grid;
        Purpose: These layout properties create flexible and grid-based layouts, respectively.
        Usage: Use them when designing complex, responsive layouts. display: flex; is well-suited for one-dimensional layouts (rows or columns), while display: grid; excels at two-dimensional layouts.
        Considerations: These modern layout methods offer more control and predictability than older techniques like float.

~ Object-fit:
    Fill: 
        This is the default value which stretches the image to fit the content box, regardless of its aspect-ratio.

    Contain:
        Increases or decreases the size of the image to fill the box whilst preserving its aspect-ratio.

    Cover:
        The image will fill the height and width of its box, once again maintaining its aspect ratio but often cropping the image in the process.

    None: 
        Image will ignore the height and width of the parent and retain its original size.

    Scale-down:
        The image will compare the difference between none and contain in order to find the smallest concrete object size.

~ Use Margin and Padding Appropriately:

    Apply margins to create space *around* elements.
    Use padding to create space *within* elements.
    AVOID using negative margins excessively, as they can lead to unexpected layout issues.

~ Use z-index Carefully: 
    
    When stacking elements with position: absolute; or position: relative;, be mindful of the z-index 
    property to control the stacking order. AVOID excessive use of high z-index values, as it can lead 
    to stacking confusion.

~ Maintain a Consistent Naming Convention: 
    
    Use a consistent naming convention for CSS classes and IDs. This makes it easier to identify the 
    purpose of elements and their associated styles.

~ 

-------- JavaScript --------

~ Const
    Defines a constant reference to a value.
    Always declare a variable with const when you know that the value should not be changed.
    Use const when you declare:
    A new Array
    A new Object
    A new Function
    A new RegExp

~ Events
    Usefull Events:
        change -The content of a form element has changed.
        click -An element is clicked on.
        error -An error has occurred while loading a file.
        focus -An element gets focus.(focusin, focusout -about to get, about to lose)
        input -An element gets user input.
        toggle -The user opens or closes the <details> element.
        transitionend -A CSS transition has completed.
        wheel -The mouse wheel rolls up or down over an element.

~ Properties
    Usefull Properties:
        window.scrollX, window.scrollY -Returns the pixels the current document has been scrolled (horizontally or vertically) from the upper left corner of the window.
        window.screenY -Returns the vertical coordinate of the window relative to the screen.
        -
